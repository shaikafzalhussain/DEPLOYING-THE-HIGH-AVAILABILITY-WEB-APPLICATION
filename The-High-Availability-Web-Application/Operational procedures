
********************  Log in to the AWS Management Console: ******************** 
1. Create VPCs:

Create two separate VPCs in the Singapore region: SINGAPORE-1 and SINGAPORE-2.
Configure the VPC CIDR blocks as follows:
SINGAPORE-1: 10.0.0.0/16
SINGAPORE-2: 11.0.0.0/16

------------- step by step ---------------
Select the Singapore region.
Click on the "Create VPC" button.
In the "Basic Configuration" section:
Give your VPC a name, e.g., "SINGAPORE-1".

For IPv4 CIDR block, enter: 10.0.0.0/16.
Leave IPv6 CIDR block empty for now.

Click "Next: Review and Create".
Review the configuration and click "Create VPC".

Create the Second VPC (SINGAPORE-2):

Repeat the same steps as above, but:
Give your VPC a name, e.g., "SINGAPORE-2".
For IPv4 CIDR block, enter: 11.0.0.0/16.

2. Establish VPC Peering:

Create a VPC peering connection between SINGAPORE-1 and SINGAPORE-2.
Accept the VPC peering connection request in both VPCs.
Configure route tables in each VPC to allow traffic to flow between the two VPCs through the peering connection.

------------- step by step ---------------

Navigate to the VPC service in the AWS Management Console.
Choose "Peering connections".
Click "Create peering connection".
In the "Basic Configuration" section:
Optionally, give your peering connection a name (e.g., "SINGAPORE-1-to-SINGAPORE-2").
Select the VPC you want to initiate the peering request from (e.g., SINGAPORE-1).
For "Select another VPC to peer with", choose "My account" and select the other VPC (SINGAPORE-2).
Click "Create peering connection".
2. Accept the Peering Connection Request:

The VPC you selected as the accepter will receive a pending request.
Navigate to the "Peering connections" section in the VPC service.
Select the pending request and click "Accept request".
3. Configure Route Tables:

In the VPC where you want to allow traffic to the other VPC (e.g., SINGAPORE-1), navigate to the route tables.
Choose the route table associated with the subnets that need to communicate with the other VPC.
Click "Edit routes".
Add a new route:
Destination: The CIDR block of the other VPC (e.g., 11.0.0.0/16 for SINGAPORE-2).
Target: Select the VPC peering connection.
Save the route table.
Repeat the process for the other VPC (SINGAPORE-2), adding a route to the CIDR block of the first VPC (10.0.0.0/16).

3. Create Subnets:

Create public subnets in PUBLIC-SINGAPORE-1A and PUBLIC-SINGAPORE-1B.
Create private subnets in PRIVATE-SINGAPORE-1C.

------------- step by step ---------------

Navigate to the VPC service in the AWS Management Console.
Choose "Subnets".
Click "Create subnet".
In the "Basic Configuration" section:
Select the VPC (SINGAPORE-1A).
Give your subnet a name (e.g., "Public Subnet 1A").
Choose an Availability Zone for the subnet.
For IPv4 CIDR block, enter a CIDR block within the VPC's CIDR range (e.g., 10.0.1.0/24).
Review the configuration and click "Create subnet".
Repeat the same steps for creating a public subnet in SINGAPORE-1B (e.g., with a CIDR block of 10.0.2.0/24).
Select the SINGAPORE-1 VPC.
Give your subnet a name (e.g., "Private Subnet 1C").
Choose an Availability Zone for the subnet.
For IPv4 CIDR block, enter a CIDR block within the VPC's CIDR range (e.g., 10.0.3.0/24).

4. Deploy EC2 Instances:

Launch EC2 instances in the public and private subnets based on your application requirements.
Configure security groups for the EC2 instances to control inbound and outbound traffic.

------------- step by step ---------------

--> Launch EC2 Instances:

Navigate to the EC2 service in the AWS Management Console.
Click on "Instances" and then "Launch instances".
Choose an Amazon Machine Image (AMI) based on your application requirements (e.g., Amazon Linux, Ubuntu, Windows Server).
Select your desired instance type (e.g., t2.micro, m5.large).
In the "Configure Instance Details" section:
Choose the appropriate subnet for your instance (public or private).
Configure network settings as required (e.g., assign a public IP address to instances in public subnets).
In the "Configure Security Group" section:
Create a new security group or select an existing one. We'll configure rules in the next step.
Proceed through the remaining steps (storage, tags, etc.) based on your requirements.
Click "Launch".

--> Configure Security Groups:

Navigate to the EC2 service and select "Security Groups".
Choose the security group you created or used in the previous step.
Click "Inbound rules" to configure incoming traffic rules.
Add rules to allow necessary traffic (e.g., SSH for access, HTTP/HTTPS for web servers, database ports, etc.).
Specify the source (e.g., your IP address, a specific CIDR range, or any for all).
Click "Outbound rules" to configure outgoing traffic rules.
Typically, you'll allow all outbound traffic (0.0.0.0/0) unless you have specific restrictions.
Save the security group.


5. Configure Load Balancers:

Create Application Load Balancers in the public subnets to distribute incoming traffic across multiple EC2 instances.
Configure the load balancers with target groups pointing to the EC2 instances in the public subnets.

------------- step by step ---------------

--> Create a Target Group:

Navigate to the EC2 service in the AWS Management Console.
Under "Load Balancing", choose "Target groups".
Click "Create target group".
In the "Basic configuration" section:
Give your target group a name (e.g., "WebServerTargetGroup").
Select the protocol (e.g., HTTP) and port (e.g., 80) for your target group.
Select the VPC where your EC2 instances reside (e.g., SINGAPORE-1A).
Choose the health check protocol and path (e.g., HTTP, /healthcheck).
Click "Next: Register targets".
You can register your EC2 instances here or do it later.
Click "Next: Configure attributes" and review the settings.
Click "Create target group".

--> Create an Application Load Balancer:

In the EC2 service, under "Load Balancing", choose "Load Balancers".
Click "Create Load Balancer".
Choose "Application Load Balancer".
In the "Basic configuration" section:
Give your load balancer a name (e.g., "WebLoadBalancer").
Choose the scheme (e.g., Internet-facing).
Select the desired subnets (e.g., public subnets in SINGAPORE-1A and SINGAPORE-1B).
Choose a security group for the load balancer.
Click "Next: Configure listeners and routing".
Create a listener:
Protocol: HTTP
Port: 80
Default actions: Forward to target group (select the target group you created).
Click "Next: Review and create".
Review the configuration and click "Create load balancer".


--> Register Targets with the Target Group:

Navigate to the target group you created.
Click "Actions" and select "Register targets".
Add your EC2 instances to the target group.


6. Set Up Database:

Create a database server (e.g., RDS, Aurora) in a private subnet.
Configure database security group to allow access from the application servers.

------------- step by step ---------------

-->  Create a DB Subnet Group:

Navigate to the RDS service in the AWS Management Console.
Choose "DB Subnet Groups".
Click "Create DB subnet group".
Give your DB subnet group a name (e.g., "MyDBSubnetGroup").
Select the VPC where your private subnet resides (e.g., SINGAPORE-1C).
Add the private subnet to the DB subnet group.
Click "Create DB subnet group".

-->  Create an RDS Instance:

In the RDS service, choose "Databases".
Click "Create database".
Select your desired database engine (e.g., MySQL, PostgreSQL, SQL Server).
Choose the database instance class and storage.
Give your database instance a name and master username/password.
In the "Network & Security" section:
Select the DB subnet group you created.
Create a new security group or select an existing one. We'll configure it in the next step.
Proceed through the remaining steps (database settings, backups, etc.) based on your requirements.
Click "Create database".

-->  Configure Database Security Group:

Navigate to the EC2 service and select "Security Groups".
Choose the security group associated with your database instance.
In the "Inbound rules" section, add an inbound rule:
Type: Custom TCP
Port range: The port used by your database (e.g., 3306 for MySQL).
Source: The security group of your application servers (EC2 instances).
Save the security group.


7. Deploy Application:

Deploy your web application code to the EC2 instances in the public subnets.
Configure the application to connect to the database server in the private subnet.

------------- step by step ---------------
connect the public instances/webservers with terminal.
connect to server , go to root user , install HTTPD as (ex: AMI : AMAZON LINUX, * yum install httpd -y ) , upload your webpage code in server , start httpd now , paste public ip address in google ,to see webpage.

8. Configure Network Address Translation (NAT):

Create a NAT gateway in a public subnet to enable instances in private subnets to access the internet for outbound traffic.

------------- step by step ---------------

--> Allocate an Elastic IP Address:

Navigate to the EC2 service in the AWS Management Console.
Under "Network & Security", choose "Elastic IPs".
Click "Allocate address".
Select your preferred allocation method (e.g., Standalone).
Click "Allocate".
--> Create a NAT Gateway:

Navigate to the VPC service in the AWS Management Console.
Under "NAT gateways", click "Create NAT gateway".
Select the public subnet where you want to create the NAT gateway.
Choose the Elastic IP address you allocated.
Click "Create NAT gateway".
--> Modify Route Table:

Navigate to the route tables in your VPC.
Select the route table associated with your private subnet.
Edit the route table.
Add a new route:
Destination: 0.0.0.0/0
Target: Choose the NAT gateway you created.


9. Test and Monitor:

Test the entire setup to ensure proper communication and functionality.
Implement monitoring using Amazon CloudWatch to track EC2 instances, load balancers, and database health.
Set up alarms for critical metrics and notifications.

------------- step by step ---------------

--> CloudWatch Monitoring for EC2 Instances
Navigate to the CloudWatch console.
Choose "Metrics".
Select "EC2".
Explore available metrics (CPUUtilization, NetworkIn, NetworkOut, DiskReadBytes, DiskWriteBytes, etc.).
Create graphs and dashboards to visualize these metrics.

--> CloudWatch Monitoring for Load Balancers
Navigate to the Elastic Load Balancing console.
Choose the load balancer you want to monitor.
Click on "Monitoring" to view CloudWatch metrics related to the load balancer.
Create graphs and dashboards to visualize metrics like request count, latency, and error rate.

--> CloudWatch Monitoring for Databases
Navigate to the RDS console.
Choose the database instance you want to monitor.
Click on "Monitoring" to view CloudWatch metrics related to the database.
Create graphs and dashboards to visualize metrics like CPU utilization, disk space, database connections, and query latency.

--> Creating CloudWatch Alarms
Navigate to the CloudWatch console.
Choose "Alarms".
Click "Create alarm".
Select the metric, namespace, and dimensions (e.g., InstanceId for EC2 instances).
Define the alarm threshold and actions (e.g., send SNS notification, auto-scaling action).


10. Mount Targets:

Create mount targets for the EFS file system in both PUBLIC-SINGAPORE-1A and PUBLIC-SINGAPORE-1B subnets.
Ensure the mount targets are in the same Availability Zones as your EC2 instances for optimal performance.

------------- step by step ---------------

-->Create Mount Targets:

Navigate to the Amazon Elastic File System (EFS) service in the AWS Management Console.
Choose the EFS file system you want to mount.
Click on "Mount targets".
Click "Create mount target".
Select the VPC where you want to create the mount target (e.g., SINGAPORE-1A).
Choose the subnet in the Availability Zone where your EC2 instances reside.
Click "Create mount target".

11. IAM Role and Policy: Full Access to S3 and Read/Write for Instances

Full Access to S3: This means the IAM role has unrestricted permissions to perform any action on Amazon S3. While this provides maximum flexibility, it's generally not recommended due to security implications. It's better to grant specific permissions based on actual requirements.

Read and Write Policy for Instances: This indicates the IAM role has permissions to read from and write to EC2 instances. This could include actions like starting, stopping, terminating instances, or modifying instance attributes.

------------- step by step ---------------

--> Create an IAM Role:
Navigate to the IAM console in the AWS Management Console.
Choose "Roles".
Click "Create role".
Select "EC2" as the trusted entity type.

--> Attach Policies:
Attach the following managed policies to the role:
AmazonS3FullAccess: Grants full access to S3. Caution: This policy is overly permissive and should be replaced with more granular permissions if possible.
AmazonEC2FullAccess: Grants full access to EC2. Similarly, this policy can be refined based on specific needs.

12. Enabling VPC Flow Logs in AWS CloudWatch:

VPC Flow Logs capture information about the IP traffic going to and from network interfaces in your VPC. This data can be used for security analysis, network monitoring, troubleshooting, and compliance. Enabling VPC Flow Logs sends this data to CloudWatch Logs for analysis and storage.

------------- step by step ---------------

--> Create an IAM Role
Navigate to the IAM console.
Create a new role.
Select "AWS Service Roles" as the trusted entity.
Choose "CloudWatch Logs" as the service.
Attach the "AmazonCloudWatchLogsFullAccess" policy.

--> Create a CloudWatch Logs Group
Navigate to the CloudWatch console.
Create a new log group.
Give it a descriptive name, such as "VPC-Flow-Logs".

--> Enable Flow Logs for Your VPC
Navigate to the VPC console.
Select the VPC you want to monitor.
Choose "Flow Logs" from the navigation pane.
Click "Create flow log."
Configure the flow log:
Filter: Specify the type of traffic to log (Accepted, Rejected, or All).
Destination: Select "CloudWatch Logs."
Log group name: Enter the name of the log group you created.
IAM role: Select the IAM role created in step 1.
Log format: Choose the desired log format (e.g., JSON).
Maximum file size: Define the maximum size of the log file before it's rotated.
Number of files: Specify the number of log files to retain.
Click "Create flow log."

--> Verify Flow Log Creation
Navigate to the CloudWatch Logs console.
Select the log group you created.
You should see log entries being populated with VPC flow log data.
